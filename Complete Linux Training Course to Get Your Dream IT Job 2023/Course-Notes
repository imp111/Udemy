File System Structure:
/ - root directory (the start of the entire file system)
/boot - contains files that are used by the boot loader (grub.cfg)
/root - root user home directory
/etc - contains configuration files
/bin - user commands (/bin, /usr/bin)
/sbin - system/file system commands (/usr/sbin)
/opt - optional add-on applications (not part of the OS apps)
/proc - running processes (only exist in memory)
/lib - C programming library files needed by commands and apps (/usr/lib)
/tmp - directory for temporary files
/home - home directory of every user
/var - system logs 
/run - System daemons that start very early (systemd and udev) to store temporary runtime files like PID files
/mnt - to mount external filesystem (NFS) e.g. for things like external hard drives, flash drives etc.
/media - for cdrom mounts

Commands:
whoami - shows the current logged in user
pwd - print working directory
date - current date

- Navigating through the files system
cd - change directory
	- ./ - current directory
	- ../ - parent directory
	- Relative Path - It identifies a location relative to you current position (/OperatingSystems/Lectures/)
	- Absolute Path - Always begins with /. It is the path from the root directory to the current position (/home/userName/OperatingSystems/Lectures/)
ls - list
find - 
locate -

- File Permisions
d - directory
- - regular file
l - link
c - special file or device file
s - socket
p - named pipe
b - block device

ls -l Structure:
Type	# of Links	Owner	Group	Size	Month	Day	Time	Name	

- User Administration:
passwd [userName] - change user password
ACL (Access Control List) - gives an user or a group more flexible permissions to access, edit or execute directories and files.
If some user is not part of the group of a directory, we can add him in the ACL and he will be able to access this directory.
setfacl
	setfacl -m u:user:rwx /path/to/file - add perfmissions for user
	setfacl -m g:group:rw /path/to/file - add permissions for a group
	setfacl -Rm "entry" /path/to/file - allow all files or directories to inherit ACL entries from the directory it is within
	setfacl -x u:user /path/to/file - remove a specific entry (for specific user)
	setfacl -b /path/to/file - remove all entries (for all users)

getfacl /path/to/file - get all entries for the specific file

useradd - add user
userdel - remove user
	userdel -r userName - remove user, home directory and email spool
usermod - modify user account
groupadd
groupdel

- Creating Files and Directories:
mkdir - make directory
rmdir - remove empty directories
rm - remove files and directories (you can also remove directories - recursivly)
touch - create files
cp - copy file/files
	cp -R source desitnation - copy directories recursivly
mv - move (can be used to rename files aswell)

- File Permissions:
chmod - change file access permissions

2 Methods
- Letters 
	- r - read
	- w - write
	- x - execute

	- u - user
	- g - group
	- o - others
	- a - all
- Numbers
	- 4 - read
	- 2 - write
	- 1 - execute

chmod a+r fileName 	- adds read persmissions for all users
chmod a-r fileName 	- removes read permissions for all users
chmod 222 fileName	- gives write and execute permissions for all users

chown - change file owner
chgrp - change group ownership of a file
- Streams:
0 - stdin
1 - stdout
2 - stderr

>> - append to a file
> - overwrite file

- Standard output to file: 		Use case: (echo "testing tee" | tee testingFile)
tee

- Pipe ( | ):
command1 [arguments] | command2 [arguments] 		- pipe is used to redirect stdout of one command to stdin of another command

- Filters and Text processing commands:
awk (pattern scanning and processing language)
	awk --version						- get awk version
	awk '{print $1}' file1					- print the first column of a file
	ls -l | awk '{print $1, $3}'				- print the first and the third column of the ls -l command output
	ls -l | awk '{print $NF}'				- print the last column of the ls -l command output
	awk '/Jerry/ {print}' file				- search for a specific word in file and returns the entire row if the word matches
	awk -F: '{print $1}' /etc/passwd			- output only first field of the /etc/passwd file and use field separator ':'
	echo "Hello World" | awk '{$2 = "Adam"; print $0}'	- replace the second column with the specified word and print all the columns and rows
	cat file | awk '{$2 = "Test"; print $0}'		- replace the second column of the file with the specified word (does not change the content of the file, only the output when printing it) and print all the columns and rows
	awk 'length($0) > 15' file				- get rows that have more than 15 bytes size (15 symbols), changing the $? in the brackets specifies the column that we want to check ($0 all columns, $1 only the first columns, ..., $n etc.)
	ls -l | awk '{if($9 == "Testing stuff") print $0;}'	- if the ninth column of the ouput of the ls -l command is equal to the provided string, then print the entire ls -l command
	ls -l | awk '{print NF}'				- print the number of the last columns of the output from the ls -l command	
grep (print lines matching a pattern)
	grep --version || grep --help || man grep		- get grep help
	grep keyword file					- search for the keyword in the specified file
	grep -c keyword file					- print the count of the matching lines for each file
	grep -i keyword file					- ignore case when searching in file
	grep -n keyword file					- prefix each line 
	grep -v keyword file					- invert matching, find all the non-matching matches
	grep keyword file | awk '{print $1}'			- search for the keyword in the specified file and print only the first column from the matched row
	ls -l | grep Desktop					- search for the Desktop folder from the ls -l output
	egrep -u "keyword | keyword" file			- search for keyword1 or keyword2 in the specified file
sort (sorts in alphabetical order)
	sort --version || sort --help || man sort		- sort manual and help
	sort file						- sort a file (default: alphabetically)
	sort -r file						- reverse order sort
	sort -k2 file						- sort by field number
uniq (filters out the repeated or duplicate lines)
	uniq file						- print only unique lines
	sort file | uniq 					- sort the specified file and then print only the unique lines
	sort file | uniq -c 					- sort the specified file, print the number of duplicated and print the unique lines
	sort file | uniq -d					- sort the specified file and show only repeated lines
wc (word count - returns a count of lines, words or bytes)
	wc --version || wc --help || man wc			- wc manual and help
	wc file							- returns count of the lines, words and bytes and the file name
	wc -c file						- returns count of the bytes and the name of the file
	wc -l							- returns count of the lines
	wc -w							- returns count of the words
	wc -b							- returns count of the bytes
	wc directory						- NOT ALLOWED!
	ls -l | wc -l						- returns the line count of the ls -l command
	grep keyword | wc -l					- returns the line count of the grep keyword command
	
cut

wc (word count)

	Compare Files:
	- diff - compare files line by line
	- cmp  - compare files byte by byte

	Compress and Decompress Files:
	- tar			- takes a bunch of files and puts them in one container (doesn't compress as much)
		- tar cvf name.tar whaterverYouAreTaring - puts everything into one tar file
		- tar xvf name.tar 			 - extract everything from tar file
	- gzip fileToCompress  				 - compresses a file
	- gunzip or gzip -d fileToDecompress 		 - unzip a archive

	Truncate File Size (Shrink Size of File):

	Truncate is not the same as compression. Truncate will chop the file and you will lose information from the file.

	- truncate -s 10 fileName		- cuts the size of the file to 10 bytes

	Combining and Splitting Files:

	Multiple files can be combined to one, and one to file can be split to many files.

	- cat file1 file2 file3 file4 > file5
	- split file4
		- split -l 10 fileToSplit.txt fileToPutTheTextInto.txt	- put 10 lines in each of the fileToPutTheTextTo

- System Administration:

	File Editors:

	Text editor is a program which enables you to create and manipulate data in a Linux file.
	Most common editors
	- vi
	- nano
	- ed
	- ex
	- emacs
	- pico
	- vim

	vi common keys
	- i - insert
	- Esc - out of any mode
	- r - replace
	- d - delete
	- :q! - quit without saving
	- :wq! - quit and save
	

	File manipulation

	Replace a string in a file with a new string, find and delete a line, delete empty lines, remove the first or n lines in a file, replace tabs with spaces, show defined lines from a file and etc.

	- sed
		- sed 's/stringToFindInFile/stringToReplaceTheFoundString/g' fileName - this is going to make changes only to the output of the file, it is not going to change the content of the file.
		- sed -i 's/stringToFind/stringToReplace/g' fileName - the insert option will not change the content of the file. The 's/' stand for substitute
		
		- sed '/stringToDelete/d' fileName	- the '/d' stands for delete, this will delete all the lines that contains the string we gave as argument

		- sed '/^$/d' fileName	- remove empty lines

		- sed '1d' fileName - remove the first line of the file

		- sed '1,2d' fileName - remove first and second line of the file

		- sed 's/\t/ /g' fileName - replace tabs with spaces in the file

		- sed -n 12,18p fileName - show lines 12 to 18 from the file

		- sed 12,18d fileName - show all lines exept lines 12 to 18 from the file

		- sed G fileName  - add empty line between each line 

		- sed '8!s/stringToReplace/stringToReplaceWith/' fileName - replace all occurances of the string, expect the 8th line

		Replace in vi
		- :%s/stringToReplace/stringToReplaceWith/

- Networking Basics:
	
	Basic Terms:
	- IP (Internet Protocol) - identity number for each user in the network
		- IPv4
		- IPv6
	- Subnet Mask - 32-bit number that masks an IP Address, and divides the IP address into network and host address.  
	- Gateway (usualy the ip address of the router in a home network) - the gate that is used to access networks outside of our local area network (a.k.a. the Internet).
	
	- Static vs DHCP IP Addresses - when Static IP is set, it does not change. When the PC is restared it stays the same, while if we use DHCP, the computer will automatically pick one IP from pool of available addresses and it will change everytime we start the computer.

	- Interface (usually this is the Network Card or Wifi Card on laptops) - this is the device that allows the computer to connect to networks and Internet.
	- MAC Address - is the physical address of the Interface card. Every Interface card has a MAC Address. It is permanent and it cannot be changed.	
	
	- OUI (Organizationally Unique Identifier)
	- NIC (Network Interface Controller)

	Address Class		Bits for Subnet Mask			Subnet Mask	Subnet Mask

	Class A			11111111 00000000 00000000 00000000	255.0.0.0	/8
	Class B			11111111 11111111 00000000 00000000	255.255.0.0	/16
	Class C			11111111 11111111 11111111 00000000	255.255.255.0	/24

	
	Network File and Commands:
	- Interface Detection
	- Assign IP Address

	- Network Configuration Files
		- /etc/nsswitch.conf - tells the system where it should resolve its host name to ip address.
		- /etc/hosts - this is where you define your system host name and IP Address (it's like a small version of DNS).
		- /etc/sysconfig/network (CentOS 6) - This is the file where you specify your host name and other parameters.
		- /etc/hostname (CentOS 7) - The file where you specify your host name.
		- /etc/sysconfig/network-scripts/ifcfg-nic - this is the file of the computer interface (network card). Here you can define IP, Gateway, Subnet mask, etc.
		- /etc/resolv.conf - specifies the DNS server

	- Network Commands
		- ping	- send and recieve packets to specific IP address
		- ifconfig - shows the computer's interfaces
		- ifup / ifdown - you can shut down and start different interfaces
		- netstat - tell you about the traffic flow of the network, gateway, to which inteface it is going and others.
			- rnv
		- tcpdump - traces every transaction that is coming in and going out of the machine (every packet that goes in and out).

	NIC (Network Interface Card) Information:

	Exampple of NIC
	- enp0s3 - Ethernet interface card
	- lo	 - 127.0.0.1 (the loop back interface - it is used, so the PC can communicate with itself. It is used for diagnostics).
	- virb0 - Virtual Bridge 0 is used for NAT (Network Address Translation). Virtual environments (virtual machines) use it to connect to outside networks (Internet, etc.).
	
	Commands
	- ethtool [interface name] - gives you information about the interface (duplex type, link modes, port and others).
	
	NIC Bonding:
	
	Network Interface Card Bonding (Network Bonding) - is a combination of multiple NICs into a single bond interface. It's purpose is to provide high availability (we have two ports and combine them together, each port is 1G, so now we have 2G. This is used for high availability and link aggregation) and reundancy (we get two port and combine them, if one of them dies, the other one keeps working).

	How is Bonding done
	- modprobe bonding - install the bonding driver

	- modinfo bonding - shows if the bonding driver is already installed or not (if description is equal to Ethernet Channel Bonding Driver, then the driver is ready and installed).
	
	- create /etc/sysconfig/network-scripts/ifcfg-bond0 - create a file called ifcfg-bond0, with these parameters. This is the bonding file.
		- DEVICE=bond0 
		- TYPE=Bond 	
		- Name=bond0	(name of the bond)
		- BONDING_MASTER=yes (the name of the master, yes - it is a master of itself)
		- BOOTPROTO=none (this is the boot protocol, none - no boot protocol | static - if you want to assign static ip address)
		- ONBOOT=yes (yes - is to enable it when system reboot, no - doesn't start when system reboots)
		-IPADDR=192.168.1.80 	(assign IP address)
		-NETMASK=255.255.255.0 	(assign netmask)
		-GATEWAY=192.168.1.1	(assign gateway)
		-BONDING_OPTS="mode=5 miion=100" 
			(Modes: 
			0 - Round Robin (Packets are sequentially transmitted/recieved through each interfaces one by one)
			Fault Tolerance = No, Load Balancing = Yes

			1 - Active Backup (One NIC active while another NIC is asleep. If the active NIC goes down, another NIC becomes active. Only supported in x86 environments.)
			Fault Tolerance = Yes, Load Balancing = No

			2 - XOR (exclusive OR) (In this mode, the MAC address of the slave NIC is matched up against the incoming request's MAC and once this connection is established, the same NIC is used to transmit/recieve for the destination MAC)
			Fault Tolerance = Yes, Load Balancing = Yes

			3 - Broadcast (All transmissions are sent on all slaves)
			Fault Tolerance = Yes, Load Balancing = No

			4 - Dynamic Link Aggregation (Aggregated NICs act as one NIC which results in a higher throughput, but also provides failover in the case that a NIC fails. Dynamic Link Aggregation requires a switch that support IEEE 702.3ad)
			Fault Tolerance = Yes, Load Balancing = Yes

			5 - Transmition Load Balancing (TLB) (The outgoing traffic is disturbed depending on the current load on each slave interface. Incoming traffic is recieved by the c urrent slave. If the receiving slave fails, another slave takes over the MAC address of the failed slave)
			Fault Tolerance = Yes, Load Balancing = Yes

			6 - Adaptive Load Balancing (ALB) (Unlike DLA, ALB does not require any particular switch configuration. ALB is only supported in x86 environments. The receiving packets are load balanced through ARP negotitation)
			Fault Tolerance = Yes, Load Balancing = Yes
			
			Miion - specifies the MII link monitoring frequency in millseconds. Determines how often the link state of each slave is inspected for link failures.
	
	- edit /etc/sysconfig/network-scripts/ethernet1 - edit the first interface file (enp0s3), delete the entire content of the file and add the follwing lines:
		TYPE=Ethernet
		BOOTPROTO=none
		DEVICE=enp0s3 (the name of the first interface)
		ONBOOT=yes
		HWADDR="mac address from the ifconfig"
		MASTER=bond0
		SLAVE=yes
		
	- edit /etc/sysconfig/network-scripts/ethernet2
		TYPE=Ethernet
		BOOTPROTO=none
		DEVICE=enp0s8 (the name of the second interface)
		ONBOOT=yes
		HWADDR="mac address from the ifconfig"
		MASTER=bond0
		SLAVE=yes

	- restart network - systemctl restart network
	- test to verify the configuration - ifconfig 
	- /proc/net/bonding/bond0 - bond file that contains interface setting like bonding mode and slave interface

	Network Utilities:
	
	Network Manager (you can create bonds and teams)
		- nmtui (network manager text user interface) - make changes to a interface
		- nmcli (network manager command line interface)
			- nmcli device - returns all interfaces
		- nm-connection-editor (graphical management tool) 
		- GNOME settings (only on GNOME desktop - it has a GUI)

		Edit Static IP using nmcli
		- nmcli device
		- nmcli connection modify enp0s3 ipv4.addresses 10.253.1.211
		- nmcli connection modify enp0s3 ipv4.gateway 10.253.1.1 (routes ip address)
		- nmcli connection modify enp0s3 ipv4.method manual
		- nmcli connection modify enp0s3 ipv4.dns 8.8.8.8 (google's dns server)
		- nmcli connection down enp-s3 && nmcli connection up enp0s3
		- ip address show enp0s3

		Add secondary static IP using nmcli
		- nmcli device status
		- nmcli connection show --active 	(show active connections)
		- ifconfig
		- nmcli connection modify enp0s3 +ipv4.addresses 10.0.0.211/24
		- nmcli connection reload
		- systemctl reboot
		- ip address show

	Download Files and Apps:

	wget http://website.com/filename
	yum

	Curl and Ping commands:

	curl - get the content of a webpage
	ping

	FTP (File Transfer Protocol, Port 21):
	
	FTP is used to transfer files between client and a server on a computer network.
	Protocol - set of rules used by computers to communicate.
	
	Install and Configure FTP on the remote server
	- rpm -qa | grep ftp 	- if grep doesn't find ftp, we have to install it
	- yum install vsftpd
	- vi /etc/vsftpd/vsftrpd.conf		- ftp configuration file
		- anonymous_enable=NO		- disable anonymous login
		- ascii_upload_enable=YES	
		- ascii_download_enable=YES
		- ftpd_banner=FTP Welcome Message
		- use_localtime=YES

		- systemctl start vsftpd	- to start the ftp service
		- systemctl enable vsftpd	- to enable the ftp service
		- systemctl stop firewalld	- to disable the firewall so we can transfer files between the two machines

	Install FTP client on the client server
	- yum install ftp
	
	Commands to transfer file to the FTP Server
	- ftp [destination_ip_address]
	- username and password
	- bi
	- hash
	- put [file_name]  - to send a file
	- bye	- to exit

	Secure Copy Protocol (Port 22):

	SCP helps transfer computer files ecurely from a local to a remote host (similar to FTP, but adds authentication and security)
	
	Transfer file to the remote server:
	- Login as user from client 
	- Select file to transfer
	- scp fileName username@ipaddress:destination
	- enter username and password

	Remote Synchronization (rsync, Port 22):
	
	rsync is utility for transferring adn synchronizing files within the same computer or to a remote computer by comparing the modification times and sizes of files.
	It is faster than ftp and scp. Mostly used to backup the files and directories from one server to another.
	
	rsync and scp use the same port (Port 22) as ssh, so you dont need to download it.
	
	How it works?
	We send file from Client to Server. After that if there are changes done to the file and send again to the Server, the entire file will not be send, only the difference between the current versions on the Server and the Client.

	Client				Server
	2M		->		2M 	- First sending of fileA
	10M		->		10M	- There we changes done to the file, so now the 10M will be subtracted from the 2M on the Server, and only 8M will be send to the Server.

	Install rsync on client machine
	- yum install rsync - install rsync on the client computer (no need to install it on the server)
	
	Rsync a file on a clienit machine (very easy way to create a backup on the client pc)
	- tar cvf backup.tar directory 	 - create a archive of a directory
	- mkdir /tmp/backups		 - create a backup directory in the tmp folder
	- rsync -zvh fileName directory  - send the file with rsync from client to server

	Rsync a directory on a local machine (create a backup of a directory on the client pc)
	- rsync -azvh directoryToBackup directoryToStoreTheBackup

	Rsync a file to a remote machine
	- mkdir /tmp/backups 	- create backups folder on the remote server
	- rsync -avz backup.tar username@ipaddress:directoryToSendTheBackupOnTheServer

	Rsync a file from a remote machine (Execute from client PC)
	- touch serverFile
	- rsync -avzh username@ipaddressOfServer:destinationOfTheFileOnServerPC directoryToSendTheBackupToOnClientPC

	System Updates and Repos (Package Managers):



	



	

